type SgNetwork @entity {
  id: ID! 
  name: String!
}

type SgTransfer @entity {
  "hash"
  id: ID!
  network: SgNetwork!
  "Token Address"
  sett: SgSett
  from: String!
  to: String!
  amount: BigInt!
  "Reverse lookup"
  sgGeyser: SgGeyser
}

type SgHarvest @entity {
  "hash"
  id: ID!
  network: SgNetwork
  sett: SgSett
  performanceFee: BigInt!
  strategistFee: BigInt!
  withdrawFee: BigInt!
  "total token claimed"
  harvested: BigInt!
  "total token reinvested"
  compounded: BigInt!
  "total token performance fee"
  performance: BigInt!
  "total token strategist fee"
  strategist: BigInt!
  "current price Per Full Share"
  pricePerFullShare: BigInt!
  "total Supply"
  totalSupply: BigInt!
  "balance"
  balance: BigInt!
}

type SgStrategy @entity {
  "address"
  id: ID!
  network: SgNetwork
  sett: SgSett
  active: Boolean
  harvests: [SgHarvest!]
}

# type SgSettContract @entity {
#   "address-network"
#   id: ID!
#   network: SgNetwork
#   transfers: [SgTransfer!]
#   deposits: [SgTransfer!]
#   withdraws: [SgTransfer!]
#   balanceData: SgSettBalance
#   strategies: [SgStrategy!]
#   harvests: [SgHarvest!]
# }

type SgGeyser @entity {
  "address-network"
  id: ID!
  "eth / bsc"
  network: SgNetwork
  "staked / unstaked"
  transactions: [SgTransfer!] @derivedFrom(field: "sgGeyser")
  "Current Geyser deposit token value"
  netDeposit: BigInt!
  "Total sett deposit token value"
  grossDeposit: BigInt!
  "Total sett withdraw token value"
  grossWithdraw: BigInt!
}

# Ported from - Badger-DAO@Sett
type SgSett @entity {
  "address-network"
  id: ID!
  "network"
  network: SgNetwork
  "Sett name"
  name: String!
  "Share token symbol"
  symbol: String!
  "Deposit token"
  token: Token!
  "Deposit token per share"
  pricePerFullShare: BigInt!
  "Shares outstanding"
  balance: BigInt!
  "Deposit tokens outstanding"
  totalSupply: BigInt!
  "Current sett deposit token value"
  netDeposit: BigInt!
  "Total sett deposit token value"
  grossDeposit: BigInt!
  "Total sett withdraw token value"
  grossWithdraw: BigInt!
  "Current sett deposit share value"
  netShareDeposit: BigInt!
  "Total sett deposit share value"
  grossShareDeposit: BigInt!
  "Total sett withdraw share value"
  grossShareWithdraw: BigInt!
}

# Ported from - Badger-DAO@UserSettBalance
type SgSettBalance @entity {
  "address-network-token"
  id: ID!
  "address"
  user: SgUser!
  "which sett token is this balance for"
  sett: SgSett!
  "network"
  network: SgNetwork!
  "Current user deposit token value"
  netDeposit: BigInt!
  "Total user deposit token value"
  grossDeposit: BigInt!
  "Total user withdraw token value"
  grossWithdraw: BigInt!
  "Current user deposit share value"
  netShareDeposit: BigInt!
  "Total user deposit share value"
  grossShareDeposit: BigInt!
  "Total user withdraw share value"
  grossShareWithdraw: BigInt!
}

# Ported from - Badger-DAO@User
type SgUser @entity {
  "address"
  id: ID!
  network: SgNetwork!
  deposits: [SgTransfer!]
  withdraws: [SgTransfer!]
  transfers: [SgTransfer!]
  balances: [SgSettBalance!] @derivedFrom(field: "user")
}

type Token @entity {
  id: ID!
  address: Bytes!
  decimals: Int!
  name: String!
  symbol: String!
  "Additional Data needed for BadgerDao"
  totalSupply: BigInt
}
